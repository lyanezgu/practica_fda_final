summary(modelo)
library(MASS)
#metodo de selección por pasos e indica las variables que son significativas
seleccion=stepAIC(modelo,direction = c("both"))
#me da informacion unicamente del mejor modelo
summary(seleccion)
#indico cual es el mejor mocelo q se selelcciono
mejor_modelo=lm(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges,data=train)
summary(mejor_modelo)
#determino los intervalos de confiianza para las observaciones
intervalos = predict(mejor_modelo,interval = "confidence",level = 0.95)
print(intervalos)
#nos muestra la significación de la regresión, en nuestro caso total_discharge no es significativa
#para el modelo
anova=aov(mejor_modelo)
summary(anova)
muestras_residuos=resid(mejor_modelo)
residual_norm=shapiro.test(muestras_residuos[0:5000])
residual_norm
#install.packages('nortest')
library(nortest)
residual_anderson=ad.test(muestras_residuos)
residual_anderson
varianza_constante= bartlett.test(list(copagos,categoria_state,categoria_enf,cobertura,mean_covered_charges,total_discharges),data=train)
varianza_constante= bartlett.test(copagos,categoria_state,categoria_enf,
cobertura,mean_covered_charges,total_discharges,data=train)
varianza_constante= bartlett.test(train$copagos,categoria_state,categoria_enf,
cobertura,mean_covered_charges,total_discharges,data=train)
varianza_constante= bartlett.test(train$copagos,train$categoria_state,train$categoria_enf,
traine$cobertura,train$mean_covered_charges,train$total_discharges,data=train)
varianza_constante
knitr::opts_chunk$set(echo = TRUE)
library(formatR)
library(readr)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(missForest)
library(VIM)
library(formattable)
library(usmap)
library(cowplot)
library(corrplot)
hospital_charges <- read_csv("notebooks/hospital-charges.csv")
hospital_charges
head(hospital_charges)
summary(hospital_charges)
names(hospital_charges) <- c('drg_def', 'prov_id', 'prov_name', 'prov_address', 'prov_city', 'prov_state', 'prov_zip','hospital_ref', 'total_discharges','mean_covered_charges', 'mean_total_payments', 'mean_medicare_payments')
head(hospital_charges)
hospital_charges$mean_covered_charges = as.numeric(gsub("\\$","",hospital_charges$mean_covered_charges))
hospital_charges$mean_total_payments = as.numeric(gsub("\\$","",hospital_charges$mean_total_payments))
hospital_charges$mean_medicare_payments = as.numeric(gsub("\\$","",hospital_charges$mean_medicare_payments))
hospital_charges$prov_zip = as.factor(hospital_charges$prov_zip)
hospital_charges$prov_id = as.factor(hospital_charges$prov_id)
head(hospital_charges)
str(hospital_charges)
hospital_charges
set.seed(101)
hospital_charges <-bind_cols(hospital_charges[c(1,2,3,4,5,6,7,8,11,12)],
missForest::prodNA(hospital_charges[c(-1,-2,-3,-4,-5,-6,-7,-8,-11,-12)],noNA=0.1))
hospital_charges
summary(aggr(hospital_charges,numbers=T,sortVar=T))
#referencia https://rpubs.com/sediaz/na_aggr
set.seed(101)
sample <- sample.int(n=nrow(hospital_charges), size=floor(.80*nrow(hospital_charges)), replace = F)
train <- hospital_charges[sample,]
test <- hospital_charges[-sample,]
train
test
train$mean_covered_charges[is.na(train$mean_covered_charges)]<-mean(train$mean_covered_charges,na.rm = TRUE)
train$total_discharges[is.na(train$total_discharges)]<-mean(train$total_discharges,na.rm = TRUE)
train <-train %>%
separate(data = ., col = drg_def,
into = c("codigo_enf", "desc_enf"), sep = "-")
train$codigo_enf <- as.factor(train$codigo_enf)
train
str(train)
train <- train %>% mutate(copagos = mean_total_payments - mean_medicare_payments)
train
train <- train %>% mutate(cobertura = percent(mean_medicare_payments/mean_total_payments))
train
train <- train %>% group_by(prov_state) %>%
mutate(mean_total_state=mean(mean_total_payments))
train
train <- train %>% group_by(codigo_enf) %>%
mutate(mean_total_enf=mean(mean_total_payments))
train
summary(train)
#nueva variable agrupando estados por media de copagos
train<-train %>%
mutate(categoria_state = case_when(mean_total_state >= 12000  ~ 'High',
mean_total_state >= 8500 ~ 'Mid',
TRUE ~ 'Low'))
train
ggplot(train)+geom_bar(aes(x=categoria_state))
#nueva variable agrupando enfermedades por media de copagos
train<-train %>%
mutate(categoria_enf = case_when(mean_total_enf >= 13000 ~ 'High',
mean_total_enf >= 5500 ~ 'Mid',
TRUE ~ 'Low'))
train
ggplot(train)+geom_bar(aes(x=categoria_enf))
res <- model.matrix(~categoria_state, data = train)
head(res[, -1])
#Haciendo la media de lo que cobra el hospital por estado
region_geog <- train %>% group_by(prov_state) %>% summarise (mean_total_price = mean(copagos))
region_geog
#Libreria usmap tiene el mapa de EEUU por estado
library(usmap)
statepop #en libreria usmap hay un dataframe que es la populacion para cada estado
#(siglas -abbr ) y nos interesa agrupar a este data frame la columna mean_total_payments
names(statepop) <- c('fips','prov_state','full','pop_2015') #cambiamos el nombre de la
#columna abbr para prov_state para tenerla igual en statepop y region_geog
statepop2 <- statepop %>% left_join(region_geog, by='prov_state') #juntamos region_geog y statepop
plot_usmap(data = statepop2, values = "mean_total_price", color = "white") +
scale_fill_continuous(low='light blue', high ='dark blue',name = "Media Copagos", label = scales::dollar) +
theme(legend.position = "right")
#Haciendo la media de lo que cobra el hospital por estado
region_geog_2 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_payments))
region_geog_2
#Libreria usmap tiene el mapa de EEUU por estado
library(usmap)
statepop #en libreria usmap hay un dataframe que es la populacion para cada estado
#(siglas -abbr ) y nos interesa agrupar a este data frame la columna mean_total_payments
names(statepop) <- c('fips','prov_state','full','pop_2015') #cambiamos el nombre de la
#columna abbr para prov_state para tenerla igual en statepop y region_geog
statepop3 <- statepop %>% left_join(region_geog_2, by='prov_state') #juntamos region_geog y statepop
plot_usmap(data = statepop3, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes totales hospital", label = scales::dollar) +
theme(legend.position = "right")
d2 <- train %>%
group_by(codigo_enf) %>% summarise(n = n()) %>% arrange(desc(n)) %>% mutate(codigo_enf=factor(codigo_enf, codigo_enf))
top_10_comunes <- head(d2,10)
train %>%
filter(codigo_enf %in% top_10_comunes$codigo_enf) %>%
mutate(codigo_enf = factor(codigo_enf, levels = levels(top_10_comunes$codigo_enf))) %>%
ggplot(aes(x = codigo_enf, fill=desc_enf)) + geom_bar() + coord_flip() +
theme_bw(base_size=9) + xlab("Código enfermedad") +
ylab("Frecuencia") +
ggtitle("10 enfermedadas más comunes")
d3 <- train %>%
group_by(codigo_enf) %>% summarise(mean=mean(mean_total_payments)) %>% arrange(desc(mean))
top_10_caras <- head(d3,10)
top_10_caras
ggplot(data=top_10_caras, mapping = aes(x = reorder(codigo_enf,-mean),mean)) + geom_bar(stat = "identity", aes(fill=mean)) + theme_bw(base_size=9) + ylab("Media Total Payments") + xlab("Codigo enfermedad") + ggtitle("10 enfermedadas más caras") + scale_y_continuous(label = scales::dollar) + scale_fill_gradient(low="light blue", high="dodgerblue4")
test <- top_10_caras %>% inner_join(train)
test
ggplot(test, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "purple")
library(PerformanceAnalytics)
cor(x=train$mean_total_payments, y=train$mean_medicare_payments)
with(train, plot(x=mean_total_payments, y=mean_medicare_payments, pch=20, col='blue',
xlab='mean total payments', las=1,
ylab='mean_medicare_payments'))
library(dplyr)
library(ggplot2)
train %>% ggplot(aes(mean_total_payments, mean_medicare_payments)) +
geom_point(alpha=0.2, colour="green") +
geom_smooth(formula= 'y ~ x',method = 'lm') +
labs(title='Relacion entre variables total payments y medicare payments',
x='mean total payments',
y='mean medicare payments`')
# ver si el mean total payments sigue una normal
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=mean_total_payments))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=log10(mean_total_payments)))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=mean_medicare_payments))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(mean_medicare_payments)))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=copagos))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(copagos)))+ geom_histogram()
#train %>% select(1:14) %>%
#  na.omit() %>%
#  ggpairs(columns = 1:13, ggplot2::aes(colour=group),cardinality_threshold=50000)
train_num <- Filter(is.numeric, train)
train_num
p1 <- ggplot (train_num, aes(y= train_num$mean_total_payments)) + geom_boxplot(fill = "red") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: mean_total_payments")
p11 <- ggplot (train_num, aes(y= log10(train_num$mean_total_payments))) + geom_boxplot(fill = "red") + scale_y_continuous(name = " Log dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: Log mean_total_payments")
plot_grid(p1, p11)
mean(train_num$mean_total_payments)
p2 <- ggplot (train_num, aes(y=train_num$mean_medicare_payments)) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: mean_medicare_payments")
p22 <- ggplot (train_num, aes(y= log10(train_num$mean_medicare_payments))) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: Log mean_medicare_payments")
plot_grid(p2, p22)
mean(train_num$mean_medicare_payments)
p3 <- ggplot (train_num, aes(y=train_num$copagos)) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: copagos")
p33 <- ggplot (train_num, aes(y=log10(train_num$copagos))) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: Log copagos")
plot_grid(p3, p33)
mean(train_num$copagos)
p4 <- ggplot (train_num, aes(y=train_num$cobertura)) + geom_boxplot(fill = "green") + scale_y_continuous(name = "% cobertura") + xlab("cobertura") + ggtitle("Boxplot: cobertura")
p4
mean(train_num$cobertura)
res <- cor(train_num)
round(res, 2)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#ggpairs(train_num, lower = list(continuous = "smooth"),
#        diag = list(continuous = "bar"), axisLabels = "none", cardinality_threshold=5000)
#pairs(x = train_num)
ggplot(data = train, mapping=aes(x = categoria_state, y = log10(copagos), color=categoria_state)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
library(MASS)
#attach(train)
modelo_1= lm(copagos~categoria_state+categoria_enf+log(cobertura),data=train)
#coef(modelo)
summary(modelo_1)
modelo_2= lm(copagos~categoria_state+categoria_enf+cobertura+mean_covered_charges,data=train)
#coef(modelo)
summary(modelo_2)
modelo_3= lm(copagos~categoria_state+categoria_enf+
mean_medicare_payments,data=train)
#coef(modelo)
summary(modelo_3)
modelo_4= lm(copagos~categoria_state+categoria_enf+cobertura+
mean_total_payments+total_discharges+mean_covered_charges,data=train)
#coef(modelo)
summary(modelo_4)
library(ggfortify)
autoplot(modelo_2)
#medimos independencia entre los residuos
#entonces no rechazamos la  hipotesis nula y podemos asumir que los residuos no presentan autcorrelacion
library(lmtest)
dwtest(modelo_2)
#scale-location-homocedasticidad
#rechazamos la hipotesis nula que la varianza de los errores ees constante
bptest(modelo_2)
knitr::opts_chunk$set(echo = TRUE)
library(formatR)
library(readr)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(missForest)
library(VIM)
library(formattable)
library(usmap)
library(cowplot)
library(corrplot)
hospital_charges <- read_csv("notebooks/hospital-charges.csv")
hospital_charges
head(hospital_charges)
summary(hospital_charges)
names(hospital_charges) <- c('drg_def', 'prov_id', 'prov_name', 'prov_address', 'prov_city', 'prov_state', 'prov_zip','hospital_ref', 'total_discharges','mean_covered_charges', 'mean_total_payments', 'mean_medicare_payments')
head(hospital_charges)
hospital_charges$mean_covered_charges = as.numeric(gsub("\\$","",hospital_charges$mean_covered_charges))
hospital_charges$mean_total_payments = as.numeric(gsub("\\$","",hospital_charges$mean_total_payments))
hospital_charges$mean_medicare_payments = as.numeric(gsub("\\$","",hospital_charges$mean_medicare_payments))
hospital_charges$prov_zip = as.factor(hospital_charges$prov_zip)
hospital_charges$prov_id = as.factor(hospital_charges$prov_id)
head(hospital_charges)
str(hospital_charges)
hospital_charges
set.seed(101)
hospital_charges <-bind_cols(hospital_charges[c(1,2,3,4,5,6,7,8,11,12)],
missForest::prodNA(hospital_charges[c(-1,-2,-3,-4,-5,-6,-7,-8,-11,-12)],noNA=0.1))
hospital_charges
summary(aggr(hospital_charges,numbers=T,sortVar=T))
#referencia https://rpubs.com/sediaz/na_aggr
set.seed(101)
sample <- sample.int(n=nrow(hospital_charges), size=floor(.80*nrow(hospital_charges)), replace = F)
train <- hospital_charges[sample,]
test <- hospital_charges[-sample,]
train
test
train$mean_covered_charges[is.na(train$mean_covered_charges)]<-mean(train$mean_covered_charges,na.rm = TRUE)
train$total_discharges[is.na(train$total_discharges)]<-mean(train$total_discharges,na.rm = TRUE)
train <-train %>%
separate(data = ., col = drg_def,
into = c("codigo_enf", "desc_enf"), sep = "-")
train$codigo_enf <- as.factor(train$codigo_enf)
train
str(train)
train <- train %>% mutate(copagos = mean_total_payments - mean_medicare_payments)
train
train <- train %>% mutate(cobertura = percent(mean_medicare_payments/mean_total_payments))
train
train <- train %>% group_by(prov_state) %>%
mutate(mean_total_state=mean(mean_total_payments))
train
train <- train %>% group_by(codigo_enf) %>%
mutate(mean_total_enf=mean(mean_total_payments))
train
summary(train)
#nueva variable agrupando estados por media de copagos
train<-train %>%
mutate(categoria_state = case_when(mean_total_state >= 12000  ~ 'High',
mean_total_state >= 8500 ~ 'Mid',
TRUE ~ 'Low'))
train
ggplot(train)+geom_bar(aes(x=categoria_state))
#nueva variable agrupando enfermedades por media de copagos
train<-train %>%
mutate(categoria_enf = case_when(mean_total_enf >= 13000 ~ 'High',
mean_total_enf >= 5500 ~ 'Mid',
TRUE ~ 'Low'))
train
ggplot(train)+geom_bar(aes(x=categoria_enf))
res <- model.matrix(~categoria_state, data = train)
head(res[, -1])
#Haciendo la media de lo que cobra el hospital por estado
region_geog <- train %>% group_by(prov_state) %>% summarise (mean_total_price = mean(copagos))
region_geog
#Libreria usmap tiene el mapa de EEUU por estado
library(usmap)
statepop #en libreria usmap hay un dataframe que es la populacion para cada estado
#(siglas -abbr ) y nos interesa agrupar a este data frame la columna mean_total_payments
names(statepop) <- c('fips','prov_state','full','pop_2015') #cambiamos el nombre de la
#columna abbr para prov_state para tenerla igual en statepop y region_geog
statepop2 <- statepop %>% left_join(region_geog, by='prov_state') #juntamos region_geog y statepop
plot_usmap(data = statepop2, values = "mean_total_price", color = "white") +
scale_fill_continuous(low='light blue', high ='dark blue',name = "Media Copagos", label = scales::dollar) +
theme(legend.position = "right")
#Haciendo la media de lo que cobra el hospital por estado
region_geog_2 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_payments))
region_geog_2
#Libreria usmap tiene el mapa de EEUU por estado
library(usmap)
statepop #en libreria usmap hay un dataframe que es la populacion para cada estado
#(siglas -abbr ) y nos interesa agrupar a este data frame la columna mean_total_payments
names(statepop) <- c('fips','prov_state','full','pop_2015') #cambiamos el nombre de la
#columna abbr para prov_state para tenerla igual en statepop y region_geog
statepop3 <- statepop %>% left_join(region_geog_2, by='prov_state') #juntamos region_geog y statepop
plot_usmap(data = statepop3, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes totales hospital", label = scales::dollar) +
theme(legend.position = "right")
d2 <- train %>%
group_by(codigo_enf) %>% summarise(n = n()) %>% arrange(desc(n)) %>% mutate(codigo_enf=factor(codigo_enf, codigo_enf))
top_10_comunes <- head(d2,10)
train %>%
filter(codigo_enf %in% top_10_comunes$codigo_enf) %>%
mutate(codigo_enf = factor(codigo_enf, levels = levels(top_10_comunes$codigo_enf))) %>%
ggplot(aes(x = codigo_enf, fill=desc_enf)) + geom_bar() + coord_flip() +
theme_bw(base_size=9) + xlab("Código enfermedad") +
ylab("Frecuencia") +
ggtitle("10 enfermedadas más comunes")
d3 <- train %>%
group_by(codigo_enf) %>% summarise(mean=mean(mean_total_payments)) %>% arrange(desc(mean))
top_10_caras <- head(d3,10)
top_10_caras
ggplot(data=top_10_caras, mapping = aes(x = reorder(codigo_enf,-mean),mean)) + geom_bar(stat = "identity", aes(fill=mean)) + theme_bw(base_size=9) + ylab("Media Total Payments") + xlab("Codigo enfermedad") + ggtitle("10 enfermedadas más caras") + scale_y_continuous(label = scales::dollar) + scale_fill_gradient(low="light blue", high="dodgerblue4")
test <- top_10_caras %>% inner_join(train)
test
ggplot(test, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "purple")
library(PerformanceAnalytics)
cor(x=train$mean_total_payments, y=train$mean_medicare_payments)
with(train, plot(x=mean_total_payments, y=mean_medicare_payments, pch=20, col='blue',
xlab='mean total payments', las=1,
ylab='mean_medicare_payments'))
library(dplyr)
library(ggplot2)
train %>% ggplot(aes(mean_total_payments, mean_medicare_payments)) +
geom_point(alpha=0.2, colour="green") +
geom_smooth(formula= 'y ~ x',method = 'lm') +
labs(title='Relacion entre variables total payments y medicare payments',
x='mean total payments',
y='mean medicare payments`')
# ver si el mean total payments sigue una normal
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=mean_total_payments))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=log10(mean_total_payments)))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=mean_medicare_payments))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(mean_medicare_payments)))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=copagos))+ geom_histogram()
# ver si el mean total payments sigue una normal
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(copagos)))+ geom_histogram()
#train %>% select(1:14) %>%
#  na.omit() %>%
#  ggpairs(columns = 1:13, ggplot2::aes(colour=group),cardinality_threshold=50000)
train_num <- Filter(is.numeric, train)
train_num
p1 <- ggplot (train_num, aes(y= train_num$mean_total_payments)) + geom_boxplot(fill = "red") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: mean_total_payments")
p11 <- ggplot (train_num, aes(y= log10(train_num$mean_total_payments))) + geom_boxplot(fill = "red") + scale_y_continuous(name = " Log dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: Log mean_total_payments")
plot_grid(p1, p11)
mean(train_num$mean_total_payments)
p2 <- ggplot (train_num, aes(y=train_num$mean_medicare_payments)) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: mean_medicare_payments")
p22 <- ggplot (train_num, aes(y= log10(train_num$mean_medicare_payments))) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: Log mean_medicare_payments")
plot_grid(p2, p22)
mean(train_num$mean_medicare_payments)
p3 <- ggplot (train_num, aes(y=train_num$copagos)) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: copagos")
p33 <- ggplot (train_num, aes(y=log10(train_num$copagos))) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: Log copagos")
plot_grid(p3, p33)
mean(train_num$copagos)
p4 <- ggplot (train_num, aes(y=train_num$cobertura)) + geom_boxplot(fill = "green") + scale_y_continuous(name = "% cobertura") + xlab("cobertura") + ggtitle("Boxplot: cobertura")
p4
mean(train_num$cobertura)
res <- cor(train_num)
round(res, 2)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#ggpairs(train_num, lower = list(continuous = "smooth"),
#        diag = list(continuous = "bar"), axisLabels = "none", cardinality_threshold=5000)
#pairs(x = train_num)
ggplot(data = train, mapping=aes(x = categoria_state, y = log10(copagos), color=categoria_state)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
modelo= lm(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges,data=train)
#coef(modelo)
summary(modelo)
library(MASS)
#metodo de selección por pasos e indica las variables que son significativas
seleccion=stepAIC(modelo,direction = c("both"))
#me da informacion unicamente del mejor modelo
summary(seleccion)
#indico cual es el mejor mocelo q se selelcciono
mejor_modelo=lm(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges,data=train)
summary(mejor_modelo)
#comprobamos si la media de los errores es igual a cero
mean(mejor_modelo$residuals)
#comprobamos si la media de los errores es igual a cero o se aproxima
mean(mejor_modelo$residuals)
crPlots(mejor_modelo)
plot(mejor_modelo,1)
library(ggfortify)
autoplot(mejor_modelo,1)
plot(mejor_modelo,1)
library(ggfortify)
autoplot(mejor_modelo,1)
#forma grafico 1
plot(mejor_modelo,1)
#forma grafico 2 que te muestra lo mismo
library(ggfortify)
autoplot(mejor_modelo,1)
#determino los intervalos de confiianza para las observaciones
intervalos = predict(mejor_modelo,interval = "confidence",level = 0.95)
print(intervalos)
#muestras_residuos=resid(mejor_modelo)
#obtengo la diitribucion de los residuos estandariizados
muestras_residuos1=studres(mejor_modelo)
residual_norm=shapiro.test(muestras_residuos1[0:5000])
residual_norm
#install.packages('nortest')
library(nortest)
residual_anderson=ad.test(muestras_residuos1)
residual_anderson
plot(mejor_modelo,2)
autoplot(mejor_modelo,2)
hist(muestras_residuos1, freq=FALSE,main="Distribución de los residuos estandarizados")
#estas tres graficas te muestran lo mismo
plot(mejor_modelo,2)
autoplot(mejor_modelo,2)
hist(muestras_residuos1, freq=FALSE,main="Distribución de los residuos estandarizados")
xfit<-seq(min(muestras_residuos1),max(muestras_residuos1),length=40)
yfit<-dnorm(xfit)
lines(xfit,yfit)
varianza_constante= bartlett.test(train$copagos,train$categoria_state,train$categoria_enf,
traine$cobertura,train$mean_covered_charges,train$total_discharges,data=train)
varianza_constante
ncvTest(mejor_modelo)
library(car)
ncvTest(mejor_modelo)
#https://fhernanb.github.io/libro_regresion/homo.html
#otra prueba para comprobar homocedes
library(car)
ncvTest(mejor_modelo)
plot(mejor_modelo,3)
autoplot(mejor_modelo,3)
durbinWatsonTest(mejor_modelo)
plot(mejor_modelo,3)
autoplot(mejor_modelo,3)
durbinWatsonTest(mejor_modelo)
durbinWatsonTest(mejor_modelo)
plot(mejor_modelo$resid)
plot(mejor_modelo$resid)
plot(mejor_modelo$resid)
acf(mejor_modelo$residuals)
library(gvlma)
install.packages("gvlma")
library(gvlma)
gvlma(mejor_modelo)
library(gvlma)
gvlma(mejor_modelo)
durbinWatsonTest(mejor_modelo)
plot(mejor_modelo,3)
autoplot(mejor_modelo,3)
plot(gvlma(mejor_modelo))
plot(mejor_modelo)
