theme_bw(base_size=9) + xlab("Código enfermedad") +
ylab("Frecuencia") +
ggtitle("10 enfermedadas más comunes")
d3 <- train %>%
group_by(codigo_enf) %>% summarise(mean=mean(mean_total_payments)) %>% arrange(desc(mean))
top_10_caras <- head(d3,10)
ggplot(data=top_10_caras, mapping = aes(x = reorder(codigo_enf,-mean),mean)) + geom_bar(stat = "identity", aes(fill=mean)) + theme_bw(base_size=9) + ylab("Media Total Payments") + xlab("Codigo enfermedad") + ggtitle("10 enfermedadas más caras") + scale_y_continuous(label = scales::dollar) + scale_fill_gradient(low="light blue", high="dodgerblue4")
test <- top_10_caras %>% inner_join(train)
ggplot(test, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
cor(x=train$mean_total_payments, y=train$mean_medicare_payments)
#with(train, plot(x=mean_total_payments, y=mean_medicare_payments, pch=20, col='blue',
#xlab='mean total payments', las=1,
#ylab='mean_medicare_payments'))
train %>% ggplot(aes(mean_total_payments, mean_medicare_payments)) +
geom_point(alpha=0.2, colour="green") +
geom_smooth(formula= 'y ~ x',method = 'lm') +
labs(title='Relación entre variables total payments y medicare payments',
x='mean total payments',
y='mean medicare payments`')
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=mean_total_payments))+ geom_histogram(color="red", fill = "red") + ggtitle("Distribuición normal - Mean Total Payments")
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=log10(mean_total_payments)))+ geom_histogram(color="red", fill = "red") + ggtitle("Distribuición normal - Log Mean Total Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=mean_medicare_payments))+ geom_histogram(color="blue", fill = "blue") + ggtitle("Distribuición normal - Mean Medicare Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(mean_medicare_payments)))+ geom_histogram(color="blue", fill = "blue")+ggtitle("Distribuición normal - Log Mean Medicare Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=copagos))+ geom_histogram(color = "orange", fill = "orange") + ggtitle("Distribuición normal - Copagos")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(copagos)))+ geom_histogram(color = "orange", fill = "orange") + ggtitle("Distribuición normal - Log Copagos")
train_num <- Filter(is.numeric, train)
train_num
p1 <- ggplot (train_num, aes(y= train_num$mean_total_payments)) + geom_boxplot(fill = "red") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: mean_total_payments")
p11 <- ggplot (train_num, aes(y= log10(train_num$mean_total_payments))) + geom_boxplot(fill = "red") + scale_y_continuous(name = " Log dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: Log mean_total_payments")
plot_grid(p1, p11)
mean(train_num$mean_total_payments)
p2 <- ggplot (train_num, aes(y=train_num$mean_medicare_payments)) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: mean_medicare_payments")
p22 <- ggplot (train_num, aes(y= log10(train_num$mean_medicare_payments))) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: Log mean_medicare_payments")
plot_grid(p2, p22)
mean(train_num$mean_medicare_payments)
p3 <- ggplot (train_num, aes(y=train_num$copagos)) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: copagos")
p33 <- ggplot (train_num, aes(y=log10(train_num$copagos))) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: Log copagos")
plot_grid(p3, p33)
mean(train_num$copagos)
p4 <- ggplot (train_num, aes(y=train_num$cobertura)) + geom_boxplot(fill = "green") + scale_y_continuous(name = "% cobertura") + xlab("cobertura") + ggtitle("Boxplot: cobertura")
p4
mean(train_num$cobertura)
res <- cor(train_num)
round(res, 2)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
ggplot(data = train, mapping=aes(x = categoria_state, y = log10(copagos), color=categoria_state)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
ggplot(data = train, mapping=aes(x = categoria_enf, y = log10(copagos), color=categoria_enf)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
library(formatR)
library(readr)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(missForest)
library(VIM)
library(formattable)
library(usmap)
library(cowplot)
library(corrplot)
library(MASS)
library(ggfortify)
library(nortest)
library(car)
library(lmtest)
library(PerformanceAnalytics)
hospital_charges <- read_csv("notebooks/hospital-charges.csv")
head(hospital_charges)
summary(hospital_charges)
names(hospital_charges) <- c('drg_def', 'prov_id', 'prov_name', 'prov_address', 'prov_city', 'prov_state', 'prov_zip','hospital_ref', 'total_discharges','mean_covered_charges', 'mean_total_payments', 'mean_medicare_payments')
head(hospital_charges)
hospital_charges$mean_covered_charges = as.numeric(gsub("\\$","",hospital_charges$mean_covered_charges))
hospital_charges$mean_total_payments = as.numeric(gsub("\\$","",hospital_charges$mean_total_payments))
hospital_charges$mean_medicare_payments = as.numeric(gsub("\\$","",hospital_charges$mean_medicare_payments))
hospital_charges$prov_zip = as.factor(hospital_charges$prov_zip)
hospital_charges$prov_id = as.factor(hospital_charges$prov_id)
ead(hospital_charges)
knitr::opts_chunk$set(echo = TRUE)
library(formatR)
library(readr)
library(ggplot2)
library(GGally)
library(dplyr)
library(tidyr)
library(missForest)
library(VIM)
library(formattable)
library(usmap)
library(cowplot)
library(corrplot)
library(MASS)
library(ggfortify)
library(nortest)
library(car)
library(lmtest)
library(PerformanceAnalytics)
hospital_charges <- read_csv("notebooks/hospital-charges.csv")
head(hospital_charges)
summary(hospital_charges)
names(hospital_charges) <- c('drg_def', 'prov_id', 'prov_name', 'prov_address', 'prov_city', 'prov_state', 'prov_zip','hospital_ref', 'total_discharges','mean_covered_charges', 'mean_total_payments', 'mean_medicare_payments')
head(hospital_charges)
hospital_charges$mean_covered_charges = as.numeric(gsub("\\$","",hospital_charges$mean_covered_charges))
hospital_charges$mean_total_payments = as.numeric(gsub("\\$","",hospital_charges$mean_total_payments))
hospital_charges$mean_medicare_payments = as.numeric(gsub("\\$","",hospital_charges$mean_medicare_payments))
hospital_charges$prov_zip = as.factor(hospital_charges$prov_zip)
hospital_charges$prov_id = as.factor(hospital_charges$prov_id)
head(hospital_charges)
str(hospital_charges)
hospital_charges
set.seed(101)
hospital_charges <-bind_cols(hospital_charges[c(1,2,3,4,5,6,7,8,11,12)],
missForest::prodNA(hospital_charges[c(-1,-2,-3,-4,-5,-6,-7,-8,-11,-12)],noNA=0.1))
hospital_charges
summary(aggr(hospital_charges,numbers=T,sortVar=T))
set.seed(101)
sample <- sample.int(n=nrow(hospital_charges), size=floor(.80*nrow(hospital_charges)), replace = F)
train <- hospital_charges[sample,]
test <- hospital_charges[-sample,]
train
test
train$mean_covered_charges[is.na(train$mean_covered_charges)]<-mean(train$mean_covered_charges,na.rm = TRUE)
train$total_discharges[is.na(train$total_discharges)]<-mean(train$total_discharges,na.rm = TRUE)
summary(train)
train <-train %>%
separate(data = ., col = drg_def,
into = c("codigo_enf", "desc_enf"), sep = "-")
train$codigo_enf <- as.factor(train$codigo_enf)
head(train)
train <- train %>% mutate(copagos = mean_total_payments - mean_medicare_payments)
head(train)
train <- train %>% mutate(cobertura = percent(mean_medicare_payments/mean_total_payments))
head(train)
train <- train %>% group_by(prov_state) %>%
mutate(mean_total_state=mean(mean_total_payments))
head(train)
train <- train %>% group_by(codigo_enf) %>%
mutate(mean_total_enf=mean(mean_total_payments))
head(train)
train<-train %>%
mutate(categoria_state = case_when(mean_total_state >= 12000  ~ 'High',
mean_total_state >= 8500 ~ 'Mid',
TRUE ~ 'Low'))
head(train)
ggplot(train)+geom_bar(aes(x=categoria_state, fill = categoria_state)) + theme(legend.position ="none")+ggtitle("Frecuencia de cada categoria creada para los estados - Low, Mid y High")
res <- model.matrix(~categoria_state, data = train)
head(res[, -1])
train<-train %>%
mutate(categoria_enf = case_when(mean_total_enf >= 13000 ~ 'High',
mean_total_enf >= 5500 ~ 'Mid',
TRUE ~ 'Low'))
head(train)
ggplot(train)+geom_bar(aes(x=categoria_enf, fill = categoria_enf)) + theme(legend.position ="none")+ggtitle("Frecuencia de cada categoria creada para los grupos de enfermedades - Low, Mid y High")
res2 <- model.matrix(~categoria_enf, data = train)
head(res2[, -1])
region_geog <- train %>% group_by(prov_state) %>% summarise (mean_total_price = mean(copagos))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop2 <- statepop %>% left_join(region_geog, by='prov_state')
plot_usmap(data = statepop2, values = "mean_total_price", color = "white") +
scale_fill_continuous(low='light blue', high ='dark blue',name = "Media Copagos", label = scales::dollar) +
theme(legend.position = "right")
region_geog_2 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_payments))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop3 <- statepop %>% left_join(region_geog_2, by='prov_state')
plot_usmap(data = statepop3, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes Totales", label = scales::dollar) +
theme(legend.position = "right")
d2 <- train %>%
group_by(codigo_enf) %>% summarise(n = n()) %>% arrange(desc(n)) %>% mutate(codigo_enf=factor(codigo_enf, codigo_enf))
top_10_comunes <- head(d2,10)
train %>%
filter(codigo_enf %in% top_10_comunes$codigo_enf) %>%
mutate(codigo_enf = factor(codigo_enf, levels = levels(top_10_comunes$codigo_enf))) %>%
ggplot(aes(x = codigo_enf, fill=desc_enf)) + geom_bar() +
theme_bw(base_size=9) + xlab("Código enfermedad") +
ylab("Frecuencia") +
ggtitle("10 enfermedadas más comunes")
d3 <- train %>%
group_by(codigo_enf) %>% summarise(mean=mean(mean_total_payments)) %>% arrange(desc(mean))
top_10_caras <- head(d3,10)
ggplot(data=top_10_caras, mapping = aes(x = reorder(codigo_enf,-mean),mean)) + geom_bar(stat = "identity", aes(fill=mean)) + theme_bw(base_size=9) + ylab("Media Total Payments") + xlab("Codigo enfermedad") + ggtitle("10 enfermedadas más caras") + scale_y_continuous(label = scales::dollar) + scale_fill_gradient(low="light blue", high="dodgerblue4")
test <- top_10_caras %>% inner_join(train)
ggplot(test, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
cor(x=train$mean_total_payments, y=train$mean_medicare_payments)
#with(train, plot(x=mean_total_payments, y=mean_medicare_payments, pch=20, col='blue',
#xlab='mean total payments', las=1,
#ylab='mean_medicare_payments'))
train %>% ggplot(aes(mean_total_payments, mean_medicare_payments)) +
geom_point(alpha=0.2, colour="green") +
geom_smooth(formula= 'y ~ x',method = 'lm') +
labs(title='Relación entre variables total payments y medicare payments',
x='mean total payments',
y='mean medicare payments`')
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=mean_total_payments))+ geom_histogram(color="red", fill = "red") + ggtitle("Distribuición normal - Mean Total Payments")
train%>%
filter(mean_total_payments<100000 ) %>%
ggplot(aes(x=log10(mean_total_payments)))+ geom_histogram(color="red", fill = "red") + ggtitle("Distribuición normal - Log Mean Total Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=mean_medicare_payments))+ geom_histogram(color="blue", fill = "blue") + ggtitle("Distribuición normal - Mean Medicare Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(mean_medicare_payments)))+ geom_histogram(color="blue", fill = "blue")+ggtitle("Distribuición normal - Log Mean Medicare Payments")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=copagos))+ geom_histogram(color = "orange", fill = "orange") + ggtitle("Distribuición normal - Copagos")
train%>%
filter(mean_medicare_payments<100000 ) %>%
ggplot(aes(x=log10(copagos)))+ geom_histogram(color = "orange", fill = "orange") + ggtitle("Distribuición normal - Log Copagos")
train_num <- Filter(is.numeric, train)
train_num
p1 <- ggplot (train_num, aes(y= train_num$mean_total_payments)) + geom_boxplot(fill = "red") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: mean_total_payments")
p11 <- ggplot (train_num, aes(y= log10(train_num$mean_total_payments))) + geom_boxplot(fill = "red") + scale_y_continuous(name = " Log dólares", labels = scales::dollar) + xlab("mean_total_payments") + ggtitle("Boxplot: Log mean_total_payments")
plot_grid(p1, p11)
mean(train_num$mean_total_payments)
p2 <- ggplot (train_num, aes(y=train_num$mean_medicare_payments)) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: mean_medicare_payments")
p22 <- ggplot (train_num, aes(y= log10(train_num$mean_medicare_payments))) + geom_boxplot(fill = "blue") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("mean_medicare_payments") + ggtitle("Boxplot: Log mean_medicare_payments")
plot_grid(p2, p22)
mean(train_num$mean_medicare_payments)
p3 <- ggplot (train_num, aes(y=train_num$copagos)) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: copagos")
p33 <- ggplot (train_num, aes(y=log10(train_num$copagos))) + geom_boxplot(fill = "yellow") + scale_y_continuous(name = "Log dólares", labels = scales::dollar) + xlab("copagos") + ggtitle("Boxplot: Log copagos")
plot_grid(p3, p33)
mean(train_num$copagos)
p4 <- ggplot (train_num, aes(y=train_num$cobertura)) + geom_boxplot(fill = "green") + scale_y_continuous(name = "% cobertura") + xlab("cobertura") + ggtitle("Boxplot: cobertura")
p4
mean(train_num$cobertura)
res <- cor(train_num)
round(res, 2)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
ggplot(data = train, mapping=aes(x = categoria_state, y = log10(copagos), color=categoria_state)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
ggplot(data = train, mapping=aes(x = categoria_enf, y = log10(copagos), color=categoria_enf)) +
geom_boxplot() +
geom_jitter(width = 0.1) +
theme_bw() + theme(legend.position = "none")
modelo= lm(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges,data=train)
summary(modelo)
empty.model <- lm(copagos ~ 1, data=train)
horizonte <- formula(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges)
#metodo de selección por pasos e indica las variables que son significativas
seleccion=stepAIC(empty.model,direction = c("both"),trace=FALSE,scope = horizonte)
seleccion$anova
summary(seleccion)
mejor_modelo=lm(copagos~categoria_state+categoria_enf+cobertura
+mean_covered_charges+total_discharges,data=train)
summary(mejor_modelo)
intervalos = predict(mejor_modelo,interval = "confidence",level = 0.95)
head(intervalos)
anova=aov(mejor_modelo)
summary(anova)
mean(mejor_modelo$residuals)
#forma grafico 1
plot(mejor_modelo,1)
#forma grafico 2 que te muestra lo mismo
autoplot(mejor_modelo,1)
#muestras_residuos=resid(mejor_modelo)
#obtengo la ditribucion de los residuos estandarizados
muestras_residuos1=studres(mejor_modelo)
residual_norm=shapiro.test(muestras_residuos1[0:5000])
residual_norm
#install.packages('nortest')
residual_anderson=ad.test(muestras_residuos1)
residual_anderson
#Estas tres graficas te muestran lo mismo
plot(mejor_modelo,2)
autoplot(mejor_modelo,2)
hist(muestras_residuos1, freq=FALSE,main="Distribución de los residuos estandarizados")
xfit<-seq(min(muestras_residuos1),max(muestras_residuos1),length=40)
yfit<-dnorm(xfit)
lines(xfit,yfit)
#https://fhernanb.github.io/libro_regresion/homo.html
#otra prueba para comprobar homocedasticidad
ncvTest(mejor_modelo)
#rechazamos la hipotesis nula que la varianza de los errores ees constante
plot(mejor_modelo,3)
autoplot(mejor_modelo,3)
#medimos independencia entre los residuos
#entonces no rechazamos la  hipotesis nula y podemos asumir que los residuos no presentan autcorrelacion
dwtest(mejor_modelo)
plot(mejor_modelo$resid)
acf(mejor_modelo$residuals)
library(gvlma)
gvlma(mejor_modelo)
plot(mejor_modelo)
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes Totales", label = scales::dollar) +
theme(legend.position = "right")
res <- model.matrix(~categoria_state, data = train)
head(res[, -1])
res <- model.matrix(~categoria_state, data = train)
head(res[, -1])
train<-train %>%
mutate(categoria_state = case_when(mean_total_state >= 12000  ~ 'High',
mean_total_state >= 8500 ~ 'Mid',
TRUE ~ 'Low'))
head(train)
ggplot(train)+geom_bar(aes(x=categoria_state, fill = categoria_state)) + theme(legend.position ="none")+ggtitle("Frecuencia de cada categoria creada para los estados - Low, Mid y High")
region_geog_4 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_enf))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop5 <- statepop %>% left_join(region_geog_4, by='prov_state')
plot_usmap(data = statepop5, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes Totales", label = scales::dollar) +
theme(legend.position = "right")
region_geog_4 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_enf))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop5 <- statepop %>% left_join(region_geog_4, by='prov_state')
plot_usmap(data = statepop5, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes Totales - Enfermedad", label = scales::dollar) +
theme(legend.position = "right")
region_geog_4 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_enf))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop5 <- statepop %>% left_join(region_geog_4, by='prov_state')
plot_usmap(data = statepop5, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes por Enfermedad", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light green', high ='dark green',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog <- train %>% group_by(prov_state) %>% summarise (mean_total_price = mean(copagos))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop2 <- statepop %>% left_join(region_geog, by='prov_state')
plot_usmap(data = statepop2, values = "mean_total_price", color = "white") +
scale_fill_continuous(low='light blue', high ='dark blue',name = "Media Copagos", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light purple', high ='dark purple',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light red', high ='dark red',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light yellow', high ='dark yellow',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light aquamarine', high ='dark aquamarine',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='light orange', high ='dark orange',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
region_geog_3 <- train %>% group_by(prov_state) %>% summarise (mean_total_cost = mean(mean_total_state))
names(statepop) <- c('fips','prov_state','full','pop_2015')
statepop4 <- statepop %>% left_join(region_geog_3, by='prov_state')
plot_usmap(data = statepop4, values = "mean_total_cost", color = "white") +
scale_fill_continuous(low='green', high ='red',name = "Media Costes por Estado", label = scales::dollar) +
theme(legend.position = "right")
train<-train %>%
mutate(categoria_state = case_when(mean_total_state >= 12000  ~ 'High',
mean_total_state >= 8500 ~ 'Mid',
TRUE ~ 'Low'))
train
ggplot(train)+geom_bar(aes(x=categoria_state, fill = categoria_state)) + theme(legend.position ="none")+ggtitle("Frecuencia de cada categoria creada para los estados - Low, Mid y High")
unique(train$prov_state)
unique(train$codigo_enf)
test <- top_10_caras %>% inner_join(train)
ggplot(test, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
ggplot(train, aes(x=mean_total_enf)) + geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white") + geom_density(alpha=.2, fill="#FF6666")
ggplot(train, aes(x=mean_total_enf)) + geom_histogram(aes(y=..density..), binwidth=.5, colour="black", fill="white") + geom_density(alpha=.2, fill="#FF6666")
tests <- top_10_caras %>% inner_join(train)
ggplot(tests, aes(codigo_enf,prov_state, fill=cobertura))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
ggplot(train, aes(codigo_enf, fill=mean_total_enf))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
ggplot(train, aes(codigo_enf, mean_total_enf, fill=mean_total_enf))+geom_tile() + theme_bw(base_size=7) + scale_fill_gradient(low = "white", high = "dodgerblue4")
##Ejercicio 1
# Dado el siguiente codigo pintar un histograma con ancho de barra de 0.5 para la variable rating
set.seed(1234)
dat <- data.frame(cond = factor(rep(c("A","B"), each=200)),
rating = c(rnorm(200),rnorm(200, mean=.8)))
# a) Una vez pintado de manera basica, se pide que el relleno de las barras sea blanco y el fondo negro.
plot1 <- ggplot(dat, aes(x = rating)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white")
plot1
# b) Finalmente, se pide que se a?ada una curva de densidad de este, quedando
#    el area de la curva pintado pero lo suficientemente transparente como para
#    que se vea el histograma detras.
plot2 <- ggplot(dat, aes(x = rating, y =..density..)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white") + geom_density(alpha = 0.25, fill = "red", colour = "black")
plot2
## Ejercicio 2
# Dado el mismo codigo del ejercicio anterior, conseguir lo siguiente con las variables rating y cond:
set.seed(1234)
ggplot(train, aes(x = mean_total_enf, y =..density..)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white") + geom_density(alpha = 0.25, fill = "red", colour = "black")
plot2
# b) Finalmente, se pide que se a?ada una curva de densidad de este, quedando
#    el area de la curva pintado pero lo suficientemente transparente como para
#    que se vea el histograma detras.
plot2 <- ggplot(dat, aes(x = rating, y =..density..)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white") + geom_density(alpha = 0.25, fill = "red", colour = "black")
plot2
ggplot(train, aes(x = mean_total_enf, y =..density..)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white") + geom_density(alpha = 0.25, fill = "red", colour = "black")
ggplot(train, aes(x = mean_total_enf, y =..density..)) + geom_histogram(binwidth = 0.5, colour = "black", fill = "white") + geom_density(alpha = 0.25, fill = "red", colour = "black")
d2 <- train %>%
group_by(codigo_enf) %>% summarise(n = n()) %>% arrange(desc(n)) %>% mutate(codigo_enf=factor(codigo_enf, codigo_enf))
top_10_comunes <- head(d2,10)
train %>%
filter(codigo_enf %in% top_10_comunes$codigo_enf) %>%
mutate(codigo_enf = factor(codigo_enf, levels = levels(top_10_comunes$codigo_enf))) %>%
ggplot(aes(x = codigo_enf, fill=desc_enf)) + geom_bar() +
theme_bw(base_size=9) + xlab("Código enfermedad") +
ylab("Frecuencia") +
ggtitle("10 enfermedadas más comunes")
ggplot(data=train, aes(x=mean_total_enf, y=codigo_enf)) +
geom_bar(stat="identity")
ggplot(data=train, aes(x=codigo_enf, y=mean_total_enf)) +
geom_bar(stat="identity")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(ggplot2)
library(dplyr)
library(readr)
library(leaflet)
data_set <- read_csv("kc_house_data.csv", show_col_types = FALSE)
data_set
head(data_set,15)
summary(data_set)
str(data_set)
data_set$id <- as.factor(data_set$id)
data_set$zipcode <- as.factor(data_set$zipcode)
data_set$waterfront <- as.logical(data_set$waterfront)
data_set$date <- as.Date(data_set$date, format = "%d.%m.%Y")
data_set$bathrooms <- trunc(data_set$bathrooms)
data_set$floors <- trunc(data_set$floors)
data_set$bedrooms <- trunc(data_set$bedrooms)
str(data_set)
head(data_set,15)
resumen_fechas <- data_set %>% summarize(primera_fecha=min(date), ultima_fecha=max(date), diferencia=max(date)-min(date))
resumen_fechas
orden_fechas <- data_set %>% arrange(desc(date))
orden_fechas
ggplot(data_set, aes(y=format(date, '%d'),x = price, fill = ..x..)) + geom_bar(stat = "identity") + scale_fill_gradient("Price", high = "red", low = "green") + ggtitle("Influencia del factor TIEMPO (días-meses) en el PRECIO de las viviendas") + theme(axis.text=element_text(size=8, angle = 90)) + facet_grid(~format(date, '%m'), scale = "free", space = "free") + scale_x_continuous(name="Price", labels = scales::dollar)+ ylab("Days - Months")
ggplot(data_set, aes(x=format(date,"%m"), y=price)) + geom_col(aes(y=price)) + facet_grid(~ format(date,"%y")) + scale_y_continuous(name="Price", labels = scales::dollar)+ xlab("Months - Years") + ggtitle("Influencia del factor TIEMPO (meses-años) en el PRECIO de las viviendas")
resumen_habitaciones <- data_set %>% summarize(min_bed=min(bedrooms), max_bed=max(bedrooms), media_bed=mean(bedrooms))
resumen_habitaciones
data_set %>% filter(bedrooms == 0)
count(data_set[data_set$bedrooms==0,])
data_set %>% filter(bedrooms == 33)
clean_data_set <- data_set[data_set$bedrooms!=33,]
clean_data_set
resumen_habitaciones_2 <- clean_data_set %>% summarize(min_bed=min(bedrooms), max_bed=max(bedrooms), media_bed=mean(bedrooms))
resumen_habitaciones_2
ggplot(clean_data_set, aes(x=factor(bedrooms), y=price)) + geom_boxplot(color="Blue", outlier.color="red") + scale_y_continuous(name="Price", labels = scales::dollar) + xlab("No. bedrooms") + ggtitle("Boxplot: PRECIO en relación al Nº HABITACIONES")
clean_data_set_score <- clean_data_set %>% mutate(clean_data_set, score = ifelse(waterfront == 1,(bedrooms*bathrooms/1.5*sqft_living)+1000,bedrooms*bathrooms/1.5*sqft_living))
clean_data_set_score
clean_data_set_MaxScoreOrder <- clean_data_set_score %>% arrange(desc(score))
clean_data_set_MaxScoreOrder
clean_data_set_Top5Score <- clean_data_set_MaxScoreOrder [1:5,]
clean_data_set_Top5Score
ggplot(clean_data_set_score, aes (x=price, y =..density..)) + geom_density(aes(fill = waterfront), alpha = 0.5) + scale_x_continuous(name="Price", labels = scales::dollar) + scale_y_continuous(name="Density", labels = scales::comma) + ggtitle("Relación variable WATERFRONT con el PRECIO de la vivienda")
reg_geo <- clean_data_set_score %>% group_by(zipcode) %>% summarise (precio_medio_ZPCD = mean(price), num_total_casas_ZPCD = length(id))
reg_geo
df_agregado <- clean_data_set_score %>% left_join(reg_geo, by="zipcode")
df_agregado
lat_min <- min(df_agregado$lat)
lat_min
lat_max <- max(df_agregado$lat)
lat_max
long_min <- min(df_agregado$long)
long_min
long_max <- max(df_agregado$long)
long_max
library(leaflet)
pal <- colorNumeric(palette = "Reds",domain = df_agregado$precio_medio_ZPCD)
m <- leaflet(options = leafletOptions(minZoom = 9, maxZoom = 14)) %>% setMaxBounds(lng1 = long_min, lat1 = lat_min,lng2 = long_max, lat2 = lat_max) %>% addTiles() %>% addCircleMarkers(data = df_agregado, lat = ~lat, lng = ~long, color = ~pal(precio_medio_ZPCD), label = df_agregado$precio_medio_ZPCD) %>% addLegend(data = df_agregado, "bottomright", pal = pal, values = ~precio_medio_ZPCD, title = "$ Medio Zipcode", labFormat = labelFormat(prefix = "$"), opacity = 1)
m
df_agregado_num <- df_agregado %>% select_if(is.numeric)
df_agregado_num
df_agregado_num_long <- gather(df_agregado_num, key = "Nombre_Va_num", value = "Valor_Va_num", 1:20)
df_agregado_num_long
ggplot(df_agregado_num_long) + geom_histogram(aes(x=Valor_Va_num), colour = 4, fill = "white") + facet_grid(~Nombre_Va_num, scales ="free") + theme_grey(base_size = 8) + theme(axis.text=element_text(size=7, angle = 90)) + ggtitle("HISTOGRAMA DE LAS VARIABLES NUMÉRICAS")
ggplot(data=train, aes(x=codigo_enf, y=mean_total_enf)) + geom_bar(stat="identity") + scale_fill_gradient("mean_total_enf", high = "red", low = "green") + theme(axis.text=element_text(size=8, angle = 90)) + scale_y_continuous(name="mean_total_enf", labels = scales::dollar)+ ylab("codigo_enf")
ggplot(data=train, aes(x=codigo_enf, y=mean_total_enf)) + geom_bar(stat="identity") + scale_fill_gradient("mean_total_enf", high = "red", low = "green") + theme(axis.text=element_text(size=7, angle = 90)) + scale_y_continuous(name="mean_total_enf", labels = scales::dollar)+ ylab("codigo_enf")
